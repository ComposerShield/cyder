name: Build Cyder

on:
  push:
    branches:
      - '**'

jobs:
  mac-15-build-xcode:
    if: false
    runs-on: macos-15
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Configure CMake (Xcode generator)
        run: cmake . -B build -G Xcode

      - name: Build
        run: cmake --build build --config Release --target Cyder_All
        
      - name: Run Unit Tests
        run: |
          cd build
          ctest -C Release --output-on-failure
          
  mac-14-build-xcode-qiti:
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Select Xcode 15.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      # Build with Qiti instrumentation, including enabling TSan.
      # Enables additional tests not possible in regular Release builds.
      - name: Configure CMake (Xcode generator)
        run: cmake . -B build -G Xcode -DENABLE_QITI=ON

      - name: Build
        run: |
          TSAN_LIB=$(xcrun --toolchain default --find libclang_rt.tsan_osx_dynamic.dylib)
          echo "TSAN runtime at: $TSAN_LIB"
          export DYLD_INSERT_LIBRARIES="$TSAN_LIB"
          cmake --build build --config Debug --target Cyder_Tests
        
      - name: Run Unit Tests
        run: |
          cd build
          ctest -C Debug --output-on-failure

  windows-11-build:
    if: false
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure CMake (Visual Studio generator)
        run: cmake . -B build -G "Visual Studio 17 2022"

      - name: Build (parallel)
        run: cmake --build build --config Release --parallel 4 --target Cyder_All

      - name: Run Unit Tests
        run: |
          cd build
          ctest -C Release --output-on-failure

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install cpplint
        run: pip3 install cpplint

      - name: Run CPPLint
        run: ./runCpplint.sh
